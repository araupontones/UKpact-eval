select(Component, Theme)
View(sankey_data)
#format data
sankey_data <- app_data %>%
select(Country,Component, Theme)
View(sankey_data)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(project = n())
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(project = n())
View(sankey_data)
countries <- unique(app_data$Country)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(project = n()) %>%
filter(Country == countries[[1]])
View(sankey_data)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(source = Component,
target = Theme)
View(sankey_data)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
rename(source = Component,
target = Theme)
View(sankey_data)
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
View(nodes)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
View(links)
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Component = glue::glue('<www/icon/img src = {Component}.svg>'))
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
#load data
app_data <- rio::import("data/app/projects.rds")
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Component = glue::glue('<www/icon/img src = {Component}.svg>')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Theme = glue::glue('<www/icon/img src = {Theme}.svg>')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Theme = glue::glue('<img src = "www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
?sankeyNetwork
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[2]]) %>%
mutate(Theme = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[3]]) %>%
mutate(Theme = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[4]]) %>%
mutate(Theme2 = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[5]]) %>%
mutate(Theme2 = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#create grouped data for app
# so users can display aggregations by theme and component in the map
library(dplyr)
exfile <- "data/app/projects_by_country.rds"
app_data <- rio::import("data/app/projects.rds")
#group data -------------------------------------------------------------------
projects_country <- app_data
View(projects_country)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country, Component) %>%
summarise(projects = n(), .groups = 'drop')
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(), .groups = 'drop')
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(), .groups = 'drop') %>%
filter(Country != "Multu-country")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(), .groups = 'drop') %>%
filter(Country != "Multu-country") %>%
left_join(world)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(), .groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
#save --------------------------------------------------------------------------
rio::export(projects_country, exfile)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("C:/repositaries/1.work/UKpact-eval/R/module_map.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#create grouped data for app
# so users can display aggregations by theme and component in the map
library(dplyr)
exfile <- "data/app/projects_by_country.rds"
app_data <- rio::import("data/app/projects.rds")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country, Components) %>%
mutate(Components  = n(), .groups = 'drop') %>%
group_by(Country) %>%
summarise(projects = n(), .groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
names(app_data)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country, Component) %>%
mutate(Components  = n(), .groups = 'drop') %>%
group_by(Country) %>%
summarise(projects = n(), .groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
View(projects_country)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country, Component) %>%
mutate(Components  = n(), .groups = 'drop')
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country, Component) %>%
mutate(Components  = n(), .groups = 'drop') %>%
group_by(Country) %>%
summarise(projects = n(),
components = max(Components),.groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component))
components = max(Components),.groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component))
)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme))
)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme)),
.groups = 'drop'
) %>%
filter(Country != "Multi-country") %>%
left_join(world)
#save --------------------------------------------------------------------------
rio::export(projects_country, exfile)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(app_data)
runApp()
runApp()
runApp()
links <- app_data %>%
filter(Country == countries[[5]]) %>%
#Count projects by component %>%
group_by(Component) %>%
mutate(Component = paste0(Component," (", n(), ")")) %>%
ungroup() %>%
group_by(Theme) %>%
mutate(themes = n(),
Theme = paste0(Theme," (", themes, ")")) %>%
ungroup()%>%
group_by(Component, Theme,themes) %>%
summarise(value = n(), .groups = 'drop') %>%
arrange(desc(themes)) %>%
rename(source = Component,
target = Theme)
#load data
app_data <- rio::import("data/app/projects.rds")
countries <- unique(app_data$Country)
links <- app_data %>%
filter(Country == countries[[5]]) %>%
#Count projects by component %>%
group_by(Component) %>%
mutate(Component = paste0(Component," (", n(), ")")) %>%
ungroup() %>%
group_by(Theme) %>%
mutate(themes = n(),
Theme = paste0(Theme," (", themes, ")")) %>%
ungroup()%>%
group_by(Component, Theme,themes) %>%
summarise(value = n(), .groups = 'drop') %>%
arrange(desc(themes)) %>%
rename(source = Component,
target = Theme)
View(links)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
sankey <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
sankey
runApp()
infile <- "data/reference/beneficiaries_synergies.xlsx"
bens <- rio::import(infile)
bens <- rio::import(infile) %>%
filter(same_theme_two_components)
View(bens)
View(bens)
bens <- rio::import(infile) %>%
filter(same_theme_two_components) %>%
mutate(Component = sub("Component [0-9]:","", Component))
runApp()
bens <- rio::import(infile) %>%
filter(same_theme_two_components) %>%
mutate(Component = sub("Component [0-9]:","", Component),
Component = stringr::str_to_title(Component))
bens <- rio::import(infile) %>%
filter(Country == "Argentina")
class(bens)
nrow(bens)
bens <- rio::import(infile) %>%
filter(Country == "Mexico")
nrow(bens)
bens <- rio::import(infile) %>%
filter(Country == "Mexico") %>%
filter(same_theme_two_components) %>%
mutate(Component = sub("Component [0-9]:","", Component),
Component = stringr::str_to_title(Component))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(bens)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Confirm that data and shapefile matches
#if matches, save the shapefile in the data dir
library(dplyr)
exfile <- "data/shapefile/worldSF.rds"
raw_shape <- rio::import("C:/repositaries/shapefiles/clean/worldSF.rds")
raw_data <- rio::import("data/reference/themes_by_compoment_long.xlsx")
check_countries <- raw_data %>%
group_by(Country) %>%
slice(1) %>%
ungroup() %>%
select(Country) %>%
left_join(select(raw_shape, c(Country, iso2)), by = "Country")
View(raw_shape)
runApp()
