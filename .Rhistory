#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country, Component) %>%
mutate(Components  = n(), .groups = 'drop') %>%
group_by(Country) %>%
summarise(projects = n(),
components = max(Components),.groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component))
components = max(Components),.groups = 'drop') %>%
filter(Country != "Multi-country") %>%
left_join(world)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component))
)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme))
)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme)),
.groups = 'drop'
) %>%
filter(Country != "Multi-country") %>%
left_join(world)
#save --------------------------------------------------------------------------
rio::export(projects_country, exfile)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(app_data)
runApp()
runApp()
runApp()
links <- app_data %>%
filter(Country == countries[[5]]) %>%
#Count projects by component %>%
group_by(Component) %>%
mutate(Component = paste0(Component," (", n(), ")")) %>%
ungroup() %>%
group_by(Theme) %>%
mutate(themes = n(),
Theme = paste0(Theme," (", themes, ")")) %>%
ungroup()%>%
group_by(Component, Theme,themes) %>%
summarise(value = n(), .groups = 'drop') %>%
arrange(desc(themes)) %>%
rename(source = Component,
target = Theme)
#load data
app_data <- rio::import("data/app/projects.rds")
countries <- unique(app_data$Country)
links <- app_data %>%
filter(Country == countries[[5]]) %>%
#Count projects by component %>%
group_by(Component) %>%
mutate(Component = paste0(Component," (", n(), ")")) %>%
ungroup() %>%
group_by(Theme) %>%
mutate(themes = n(),
Theme = paste0(Theme," (", themes, ")")) %>%
ungroup()%>%
group_by(Component, Theme,themes) %>%
summarise(value = n(), .groups = 'drop') %>%
arrange(desc(themes)) %>%
rename(source = Component,
target = Theme)
View(links)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
sankey <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
sankey
runApp()
infile <- "data/reference/beneficiaries_synergies.xlsx"
bens <- rio::import(infile)
bens <- rio::import(infile) %>%
filter(same_theme_two_components)
View(bens)
View(bens)
bens <- rio::import(infile) %>%
filter(same_theme_two_components) %>%
mutate(Component = sub("Component [0-9]:","", Component))
runApp()
bens <- rio::import(infile) %>%
filter(same_theme_two_components) %>%
mutate(Component = sub("Component [0-9]:","", Component),
Component = stringr::str_to_title(Component))
bens <- rio::import(infile) %>%
filter(Country == "Argentina")
class(bens)
nrow(bens)
bens <- rio::import(infile) %>%
filter(Country == "Mexico")
nrow(bens)
bens <- rio::import(infile) %>%
filter(Country == "Mexico") %>%
filter(same_theme_two_components) %>%
mutate(Component = sub("Component [0-9]:","", Component),
Component = stringr::str_to_title(Component))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(bens)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Confirm that data and shapefile matches
#if matches, save the shapefile in the data dir
library(dplyr)
exfile <- "data/shapefile/worldSF.rds"
raw_shape <- rio::import("C:/repositaries/shapefiles/clean/worldSF.rds")
raw_data <- rio::import("data/reference/themes_by_compoment_long.xlsx")
check_countries <- raw_data %>%
group_by(Country) %>%
slice(1) %>%
ungroup() %>%
select(Country) %>%
left_join(select(raw_shape, c(Country, iso2)), by = "Country")
View(raw_shape)
runApp()
#create grouped data for app
# so users can display aggregations by theme and component in the map
library(dplyr)
exfile <- "data/app/projects_by_country.rds"
app_data <- rio::import("data/app/projects.rds")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
names(app_data)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme)),
.groups = 'drop'
) %>%
filter(Country != "Multi-country") %>%
left_join(world)
names(projects_country)
#format raw data for efficient analysis
#exports data to dashboard
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/app/projects.rds"
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_report/themes_by_compoment_long.xlsx")
View(raw_data)
#clean it ---------------------------------------------------------------------
names(raw_data)
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component))
clean_data |> janitor::tabyl(Component)
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component),
Component = case_when(Component %in% c("Skills Shares","Secondments") ~
"Skills Shares & Secondments",
T ~ Component)
)
clean_data |> janitor::tabyl(Component)
#format raw data for efficient analysis
#exports data to dashboard
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/app/projects.rds"
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_report/themes_by_compoment_long.xlsx")
#clean it ---------------------------------------------------------------------
names(raw_data)
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component),
Component = case_when(Component %in% c("Skills Shares","Secondments") ~
"Skills Shares & Secondments",
T ~ Component)
)
#export -----------------------------------------------------------------------
rio::export(clean_data, exfile)
#create grouped data for app
# so users can display aggregations by theme and component in the map
library(dplyr)
exfile <- "data/app/projects_by_country.rds"
app_data <- rio::import("data/app/projects.rds")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
names(app_data)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme)),
.groups = 'drop'
) %>%
filter(Country != "Multi-country") %>%
left_join(world)
View(projects_country)
#components by Country
components_country <- app_data %>%
group_by(Country, Component) %>%
summarise(projects = n(),
Start_Date = min(Start_Date))
View(components_country)
View(app_data)
#format raw data for efficient analysis
#exports data to dashboard
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/app/projects.rds"
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_report/themes_by_compoment_long.xlsx")
View(raw_data)
#components by Country
components_country <- app_data %>%
group_by(Country) %>%
summarise(components = length(unique(components)))
#components by Country
components_country <- app_data %>%
group_by(Country) %>%
summarise(components = length(unique(Component)))
View(components_country)
View(projects_country)
#format raw data for efficient analysis
#exports data to dashboard
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/app/projects.rds"
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_report/themes_by_compoment_long.xlsx")
#clean it ---------------------------------------------------------------------
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component),
Component = case_when(Component %in% c("Skills Shares","Secondments") ~
"Skills Shares & Secondments",
T ~ Component)
)
#export -----------------------------------------------------------------------
rio::export(clean_data, exfile)
#create grouped data for app
# so users can display aggregations by theme and component in the map
library(dplyr)
exfile <- "data/app/projects_by_country.rds"
exfile_components <- "data/app/components_by_country.rds"
app_data <- rio::import("data/app/projects.rds")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
View(app_data)
#group data -------------------------------------------------------------------
projects_country <- app_data %>%
group_by(Country) %>%
summarise(projects = n(),
components = length(unique(Component)),
themes = length(unique(Theme)),
.groups = 'drop'
) %>%
filter(Country != "Multi-country") %>%
left_join(world)
#save --------------------------------------------------------------------------
rio::export(projects_country, exfile)
#View(projects_country)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("C:/repositaries/1.work/UKpact-eval/R/module_map.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component),
Component = case_when(Component %in% c("Skills Shares","Secondments") ~
"Skills Shares & Secondments",
T ~ Component)
) %>%
left_join(world)
#format raw data for efficient analysis
#exports data to dashboard
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/app/projects.rds"
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_report/themes_by_compoment_long.xlsx")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
#clean it ---------------------------------------------------------------------
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component),
Component = case_when(Component %in% c("Skills Shares","Secondments") ~
"Skills Shares & Secondments",
T ~ Component)
) %>%
left_join(world)
#export -----------------------------------------------------------------------
rio::export(clean_data, exfile)
runApp()
source("C:/repositaries/1.work/UKpact-eval/R/module_map.R", echo=TRUE)
runApp()
runApp()
runApp()
?markerClusterOptions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("C:/repositaries/1.work/UKpact-eval/R/module_map.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?clusterOptions
?clusterOptions
?leaflet::addMarkers
?leaflet::clusterOptions
runApp()
runApp()
library(shiny)
library(leaflet)
library(shiny)
library(dplyr)
library(reactable)
library(networkD3)
#load data
#Creted in R_/transform_raw_data_projects_to_app.R
app_data <- rio::import("data/app/projects.rds")
bens_data <- rio::import("data/reference/beneficiaries_synergies.xlsx")
#sum_data <- rio::import("data/app/projects_group.rds")
world <- rio::import("data/shapefile/worldSF.rds") %>% sf::st_as_sf()
#Created in R_/count_projects_country
projects_country <- rio::import("data/app/projects_by_country.rds") %>% sf::st_as_sf()
names(projects_country)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
