count_bens(grupo = c("Beneficiary","Country"), new_var = number_components, count_this = Component, total = T) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Theme"), new_var = same_theme_more_than_once) %>%
mutate(same_theme_more_than_once = same_theme_more_than_once > 1) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Component"), new_var = same_component_more_than_once) %>%
mutate(same_component_more_than_once = same_component_more_than_once > 1)
#only beneficiaries that are supported more than onxe
synergies <- bens_unnest %>%
#Number of projects that the beneficiary is supported from
count_bens(grupo = c("Country", "Beneficiary"), new_var = times_supported) %>%
filter(times_supported > 1) %>%
arrange(desc(times_supported), Country, Beneficiary) %>%
#number of different themes that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_themes, count_this = Theme, total = T) %>%
#Number of different components that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_components, count_this = Component, total = T) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Theme"), new_var = same_theme_more_than_once) %>%
mutate(same_theme_more_than_once = same_theme_more_than_once > 1) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Component"), new_var = same_component_more_than_once) %>%
mutate(same_component_more_than_once = same_component_more_than_once > 1) %>%
#number of components by theme
group_by(Country, Beneficiary, Theme) %>%
mutate(same_theme_two_components = length(unique(Component)))
#only beneficiaries that are supported more than onxe
synergies <- bens_unnest %>%
#Number of projects that the beneficiary is supported from
count_bens(grupo = c("Country", "Beneficiary"), new_var = times_supported) %>%
filter(times_supported > 1) %>%
arrange(desc(times_supported), Country, Beneficiary) %>%
#number of different themes that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_themes, count_this = Theme, total = T) %>%
#Number of different components that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_components, count_this = Component, total = T) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Theme"), new_var = same_theme_more_than_once) %>%
mutate(same_theme_more_than_once = same_theme_more_than_once > 1) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Component"), new_var = same_component_more_than_once) %>%
mutate(same_component_more_than_once = same_component_more_than_once > 1) %>%
#number of components by theme
count_bens(grupo = c("Beneficiary","Country", "Theme"), new_var = same_theme_two_components, count_this = Component, total = T)
#only beneficiaries that are supported more than onxe
synergies <- bens_unnest %>%
#Number of projects that the beneficiary is supported from
count_bens(grupo = c("Country", "Beneficiary"), new_var = times_supported) %>%
filter(times_supported > 1) %>%
arrange(desc(times_supported), Country, Beneficiary) %>%
#number of different themes that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_themes, count_this = Theme, total = T) %>%
#Number of different components that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_components, count_this = Component, total = T) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Theme"), new_var = same_theme_more_than_once) %>%
mutate(same_theme_more_than_once = same_theme_more_than_once > 1) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Component"), new_var = same_component_more_than_once) %>%
mutate(same_component_more_than_once = same_component_more_than_once > 1) %>%
#number of components by theme
count_bens(grupo = c("Beneficiary","Country", "Theme"), new_var = same_theme_two_components, count_this = Component, total = T) %>%
mutate(same_theme_two_components = same_theme_two_components > 1)
infile <- "data/reference/beneficiaries.xlsx"
bens_clean <- rio::import(infile)
#only beneficiaries that are supported more than onxe
synergies <- bens_clean %>%
#Number of projects that the beneficiary is supported from
count_bens(grupo = c("Country", "Beneficiary"), new_var = times_supported) %>%
filter(times_supported > 1) %>%
arrange(desc(times_supported), Country, Beneficiary) %>%
#number of different themes that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_themes, count_this = Theme, total = T) %>%
#Number of different components that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_components, count_this = Component, total = T) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Theme"), new_var = same_theme_more_than_once) %>%
mutate(same_theme_more_than_once = same_theme_more_than_once > 1) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Component"), new_var = same_component_more_than_once) %>%
mutate(same_component_more_than_once = same_component_more_than_once > 1) %>%
#number of components by theme
count_bens(grupo = c("Beneficiary","Country", "Theme"), new_var = same_theme_two_components, count_this = Component, total = T) %>%
mutate(same_theme_two_components = same_theme_two_components > 1)
#export ==========================================================================
rio::export(synergies, exfile)
exfile <- "data/reference/beneficiaries_synergies.xlsx"
#export ==========================================================================
rio::export(synergies, exfile)
#export ==========================================================================
rio::export(synergies, exfile, overwrite = T)
names(raw_report)
#select relevant variables
bens <- raw_report %>%
select(Project_Name, Lot, contains("Date"), Beneficiaries, Theme, Start_Date) %>%
filter(Lot != "Component 4: portfolio balancing investment panel")
list_bens <- lapply(1:nrow(bens), function(x){
#define relevant variables
data <- bens[x, ]
project <- data$Project_Name[1]
component <- data$Lot[1]
theme <- data$Theme[1]
start_date <- data$Start_Date[1]
#convert to tibble
benes <- do.call(rbind, data$Beneficiaries) %>% tibble()
#if the project has a beneficiary return the data
names_cols <- which(names(benes) == "display_value")
if(length(names_cols) > 0) {
benes_proj <- benes %>%
select(Beneficiary = display_value) %>%
mutate(Project = project,
Theme = theme,
Component = component,
Start_Date = start_date)
return(benes_proj)
} else {
return(NULL)
}
})
#unnest beneficiaries
bens_unnest <- do.call(rbind, list_bens) %>%
left_join(projects) %>%
filter(!is.na(Country)) %>%
relocate(Country, Project, Theme, Component) %>%
arrange(Country, Component, Theme, Project, Beneficiary)
View(bens_unnest)
rio::export(bens_unnest, exfile )
rio::export(bens_unnest, exfile, overwrite = T )
exfile <- "data/reference/beneficiaries.xlsx"
library(glue)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/reference/beneficiaries.xlsx"
#'Download report ================================================================================
projects <- rio::import("data/reference/themes_by_compoment_long.xlsx") %>% select(Project, Country)
##get new token get report
refresh_token = "1000.b11df28b89daaeb2df10fa2c43178db6.6f953944b607f0ff366915cb9a770edc"
#refresh zoho token --------------------------------------------------------------
new_token <- zohor::refresh_token(
base_url = "https://accounts.zoho.com",
client_id = "1000.V0FA571ML6VV7YFWRC4Q7OKQ32U5PZ",
client_secret = "c551969c7d49a7a945ac2da12d1a3fe5f241b8dae6",
refresh_token = refresh_token
)
url_app = "https://creator.zoho.com"
account_owner_name = "araupontones"
app_link_name = "uk-pact"
report_link_name = "all_projects"
access_token = new_token
criteria = 'ID != 0'
query_report <- glue::glue("{url_app}/api/v2/{account_owner_name}/{app_link_name}/report/{report_link_name}")
response_report <-  GET(query_report,
add_headers(Authorization = glue('Zoho-oauthtoken {access_token}')),
query = list(criteria = criteria,
limit = 200,
from = 1))
raw_report <- fromJSON(content(response_report, 'text'))$data
names(raw_report)
#clean report ====================================================================================
#select relevant variables
bens <- raw_report %>%
select(Project_Name, Lot, contains("Date"), Beneficiaries, Theme, Start_Date) %>%
filter(Lot != "Component 4: portfolio balancing investment panel")
#unnest beneficiaries
list_bens <- lapply(1:nrow(bens), function(x){
#define relevant variables
data <- bens[x, ]
project <- data$Project_Name[1]
component <- data$Lot[1]
theme <- data$Theme[1]
start_date <- data$Start_Date[1]
#convert to tibble
benes <- do.call(rbind, data$Beneficiaries) %>% tibble()
#if the project has a beneficiary return the data
names_cols <- which(names(benes) == "display_value")
if(length(names_cols) > 0) {
benes_proj <- benes %>%
select(Beneficiary = display_value) %>%
mutate(Project = project,
Theme = theme,
Component = component,
Start_Date = start_date)
return(benes_proj)
} else {
return(NULL)
}
})
#unnest beneficiaries
bens_unnest <- do.call(rbind, list_bens) %>%
left_join(projects) %>%
filter(!is.na(Country)) %>%
relocate(Country, Project, Theme, Component) %>%
arrange(Country, Component, Theme, Project, Beneficiary)
View(bens_unnest)
# export data ====================================================================================
rio::export(bens_unnest, exfile, overwrite = T )
#'Count the number of times a beneficiary is supported
#'Whether it is supported by different themes, or components
#'And whether the beneficiary is supported in the same theme by different components
#
infile <- "data/reference/beneficiaries.xlsx"
exfile <- "data/reference/beneficiaries_synergies.xlsx"
bens_clean <- rio::import(infile)
#utils =======================================================================
count_bens <- function(.data,
grupo,
new_var,
count_this,
total = F,
...){
if(!total){
.data %>%
group_by_at(grupo) %>%
mutate('{{new_var}}' := n()) %>%
ungroup()
} else {
.data %>%
group_by_at(grupo) %>%
mutate('{{new_var}}' := length(unique({{count_this}}))) %>%
ungroup()
}
}
#only beneficiaries that are supported more than once ==========================================================
synergies <- bens_clean %>%
#Number of projects that the beneficiary is supported from
count_bens(grupo = c("Country", "Beneficiary"), new_var = times_supported) %>%
filter(times_supported > 1) %>%
arrange(desc(times_supported), Country, Beneficiary) %>%
#number of different themes that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_themes, count_this = Theme, total = T) %>%
#Number of different components that the beneficiary is supported
count_bens(grupo = c("Beneficiary","Country"), new_var = number_components, count_this = Component, total = T) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Theme"), new_var = same_theme_more_than_once) %>%
mutate(same_theme_more_than_once = same_theme_more_than_once > 1) %>%
#whether the beneficiary is supported twice in the same theme
count_bens(grupo = c("Country", "Beneficiary", "Component"), new_var = same_component_more_than_once) %>%
mutate(same_component_more_than_once = same_component_more_than_once > 1) %>%
#number of components by theme
count_bens(grupo = c("Beneficiary","Country", "Theme"), new_var = same_theme_two_components, count_this = Component, total = T) %>%
mutate(same_theme_two_components = same_theme_two_components > 1)
View(synergies)
#export ==========================================================================
rio::export(synergies, exfile, overwrite = T)
#format raw data for efficient analysis
#exports data to dashboard
library(dplyr)
library(tidyr)
library(stringr)
exfile <- "data/app/projects.rds"
raw_data <- rio::import("data/reference/themes_by_compoment_long.xlsx")
#clean it ---------------------------------------------------------------------
names(raw_data)
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component))
#export -----------------------------------------------------------------------
rio::export(clean_data, exfile)
shiny::runApp()
raw_data %>% janitor::tabyl(Component)
View(raw_data)
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_reportthemes_by_compoment_long.xlsx")
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_reportthemes_by_compoment_long.xlsx")
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/hemes_by_compoment_long.xlsx")
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/themes_by_compoment_long.xlsx")
raw_data <- rio::import("C:/repositaries/1.work/pact/kpis/data_report/themes_by_compoment_long.xlsx")
#clean it ---------------------------------------------------------------------
names(raw_data)
clean_data <- raw_data %>%
pivot_longer(starts_with("Component"),
names_to = "Component") %>%
filter(value == 1) %>%
rename(IP = Implementor) %>%
relocate(Project, IP, Component) %>%
select(-value) %>%
#remove Component from components to make it nicer in the dash
mutate(Component = str_remove(Component, "Component [0-9]: "),
Component = str_to_title(Component))
#export -----------------------------------------------------------------------
rio::export(clean_data, exfile)
runApp()
install.packages("networkD3")
install.packages("networkD3")
library(networkD3)
library(dplyr)
#load data
app_data <- rio::import("data/app/projects.rds")
View(app_data)
#format data
sankey_data <- app_data %>%
select(Component, Theme)
View(sankey_data)
#format data
sankey_data <- app_data %>%
select(Country,Component, Theme)
View(sankey_data)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(project = n())
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(project = n())
View(sankey_data)
countries <- unique(app_data$Country)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(project = n()) %>%
filter(Country == countries[[1]])
View(sankey_data)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(source = Component,
target = Theme)
View(sankey_data)
#format data
sankey_data <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
rename(source = Component,
target = Theme)
View(sankey_data)
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
View(nodes)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
View(links)
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Component = glue::glue('<www/icon/img src = {Component}.svg>'))
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
#load data
app_data <- rio::import("data/app/projects.rds")
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Component = glue::glue('<www/icon/img src = {Component}.svg>')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Theme = glue::glue('<www/icon/img src = {Theme}.svg>')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[1]]) %>%
mutate(Theme = glue::glue('<img src = "www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
?sankeyNetwork
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[2]]) %>%
mutate(Theme = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[3]]) %>%
mutate(Theme = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[4]]) %>%
mutate(Theme2 = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
#format data
links <- app_data %>%
group_by(Country,Component, Theme) %>%
summarise(value = n()) %>%
filter(Country == countries[[5]]) %>%
mutate(Theme2 = glue::glue('<img src="www/icons/{Theme}.svg">')) %>%
rename(source = Component,
target = Theme)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
